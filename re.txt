正则表达式(RE)
  
  动机
    1.文本处理已经成为计算机常见的工作之一
    2.对文本内容的搜索,定位,提取是逻辑比较复杂的工作
    3.为了快速方便的解决上述问题,产生了正则表达式技术

  定义:即文本的高级匹配模式,提供搜索,替换等功能.其本质是一个由一系列字符和特殊符号构成的字符串
    这个字符串即正则表达式

  目标:
    1.熟练掌握正则表达式
    2.知道什么是正则表达式,如何应用
    3.能够读懂正则表达式,编写简单的正则表达式
    4.会使用re模式操作正则表达式

  正则表达式特点:
    1.方便文本处理
    2.支持语言众多
    3.使用灵活,变化多样

  python --> re模块
    re.findall(pattern, string)
    功能:获取所有正则表达式匹配的内容
    参数:
      pattern  正则表达式
      string   目标字符串
    返回:列表, 得到所有符合条件的内容

  元字符的使用
    1.普通字符
      元字符:a  b  C  张
      匹配规则:每个字符匹配对应的字符
        In [5]: re.findall('ab','abcdeafb')
        Out[5]: ['ab']

    2.或
      元字符: |
      匹配规则:匹配 | 两侧任意一个正则表达式规则
        In [7]: re.findall('ab|ef','abcdefhi')
        Out[7]: ['ab', 'ef'] 

    3.匹配单个字符
      元字符: .
      匹配规则:匹配除\n外任意一个字符
        In [8]: re.findall('f.o','foo,fao,f和o')
        Out[8]: ['foo', 'fao', 'f和o']

    4.匹配字符串开始位置
      元字符: ^ 
      匹配规则:匹配目标字符串的开始位置
        In [11]: re.findall("^Hello","Hello Jame, Hello Kitty")
        Out[11]: ['Hello']

    5.匹配字符串的结尾位置
      元字符: $
      匹配规则:匹配目标字符串的结尾位置
        In [13]: re.findall("Hello$","Hello,Jame, Hello")
        Out[13]: ['Hello']

    6.匹配重复
      元字符: *
      匹配规则:匹配前面的字符出现0次或者多次
        In [18]: re.findall("fo*","fooabcd")
        Out[18]: ['foo']
      注意: fo* 匹配f为o出现0次,而fo表示o出现一次

    7.匹配重复
      元字符: +
      匹配规则:匹配前面的字符出现1次或多次
        In [22]: re.findall("fo+","fooooooabfcdfo")
        Out[22]: ['foooooo', 'fo']

    8.匹配重复
      元字符: ?
      匹配规则:匹配前面出现的字符0次或1次
        In [32]: re.findall("fo?","fooooafddfgfo")
        Out[32]: ['fo', 'f', 'f', 'fo']

    9.匹配重复
      元字符: {n}
      匹配规则:匹配前面的字符出现指定次数
        In [29]: re.findall("ab{3}","acdefabbb")
        Out[29]: ['abbb']

    10.匹配重复
      元字符: {m,n}
      匹配规则:匹配前面出现的字符m-n次
        In [30]: re.findall("ab{3,5}","abcdefabbb,abbbbbb")
        Out[30]: ['abbb', 'abbbbb']

    11.匹配字符集
      元字符: [字符集]
      匹配规则:匹配字符集中任意一个字符

      [abc123] --> 字符集中字符
      [a-z]  [A-Z]  [0-9] --> 取字符区间内所有值
      [_#%123a-z]  可以混合使用
        In [35]: re.findall("[A-Z]+[a-z]*","Hello Jame,Beijing CBD")
        Out[35]: ['Hello', 'Jame', 'Beijing', 'CBD']

    12.匹配字符集
      元字符: [^...]
      匹配规则:匹配除了字符集中的任意一个字符
        In [42]: re.findall("[^, ]+","Hello Jame,This is a test_1")
        Out[42]: ['Hello', 'Jame', 'This', 'is', 'a', 'test_1']

    13.匹配任意(非)数字字符
      元字符: \d  \d
      匹配规则:
        \d  匹配任意数字字符  [0-9]
        \D  匹配任意非数字字符 [^0-9]
        In [45]: re.findall("1\d{10}","tel:15813670316")
        Out[45]: ['15813670316']

    14.匹配任意(非)普通字符
      元字符: \w  \W
      匹配规则:
        \w  匹配任意普通字符 [_a-zA-Z0-9]
        \W  匹配任意非普通字符
      注意:普通字符指数字 字母 下划线 和 普通utf8字符
        In [49]: re.findall("\w+","PORT#1908 44% 下降")
        Out[49]: ['PORT', '1908', '44', '下降']

    15.匹配任意(非)空字符
      元字符: \s  \S
      匹配规则:
        \s  匹配任意空字符  [\r \n \t \v \f]
        \S  匹配任意非空字符
        In [51]: re.findall("hello\s+world","hello     world")
        Out[51]: ['hello     world']

    16.匹配字符串开头结尾位置
      元字符: \A  \Z
      匹配规则: 
        \A  匹配字符串开头 ^
        \Z  匹配字符串结尾 $
        In [53]: re.findall("\A\d+-\d+\Z","1000-1500")
        Out[53]: ['1000-1500']

    17.匹配(非)单词边界
      元字符:  \b   \B
      匹配规则:
        \b  匹配单词边界位置
        \B  匹配非单词边界位置
      注意: 数字字母下划线,普通utf8字符和其它字符的交界位置为单词边界
        In [56]: re.findall(r"\bis\b","This is a test")
        Out[56]: ['is']

  元字符总结
    匹配单个字符: . [...] [^...] \d  \D  \w  \W \s \S   
    匹配重复: *  +  ?  {n}  {m,n}
    匹配位置: ^  $  \A  \Z  \b  \B
    其它: |  ()  \


正则表达式转义
  在正则表达式中如果想表达特殊符号本身则要用转义字符,即在特殊符号前加\表达其本身字符
  e.g. 正则表达式"Mr\.Right" 让 . 没有元字符含义
  特殊符号: .  *  +  ?  $  ^  []  ()  |  \
  
  目标字符串         正则表达式         python字符串
  "$10"              \$\d+             "\\$\\d+"

  raw字符串 --> 原始字符串
  特点:字符串内容为原样表达,不进行转义解析
    e.g.  r"\$\d+" ==> "\\$\\d+"


贪婪 和 非贪婪
  
  贪婪模式:正则表达式中的重复匹配默认总是尽可能多的向后匹配更对的内容.
    涉及元字符: *  +  ?  {m,n}

  非贪婪(懒惰)模式:极可能少的重复匹配内容
    贪婪 --> 非贪婪: *?  +?  ??  {m,n}?


正则表达式分组
  使用()可以为正则表达式内部建立若干分组,子组为正则表达式的一部分

  子组特点:
    1.一个正则表达式内部可以有多个分组
    2.分组后正则表达式仍然是一个整体去匹配目标字符串
      不会使用分组单独匹配
    3.分组一般由外到内,由左到右计数,不会重叠
      
  子组的作用:
    1.可以将分组作为一个整体,改变元字符的操作对象
      In [88]: re.search(r"(ab)+\d+","ababab1234").group()
      Out[88]: 'ababab1234'

      In [90]: re.search(r"\w+@\w+.(cn|com)","abc@123.com,wangwc@tedu.cn").group()
      Out[90]: 'abc@123.com'

    2.可以通过函数单独提取子组的对应匹配内容
      In [93]: re.search(r"(http|https|ftp|file)://\S+","http://www.baidu.com").group(1)
      Out[93]: 'http'
    
    3.可以通过命名注释子组含义,让结构分明
      * 子组分为捕获组和非捕获组,捕获组即定义了名称的子组
      格式: (?P<name>patter)
        In [95]: re.search(r"(?P<piglet>ab)cde","abcdefght").group()
        Out[95]: 'abcde'

正则表达式设计原则
  1.正确性,能够正确的匹配目标字符串
  2.排他性,除了要匹配的内容,尽可能不匹配到其它内容
  3.全面性,尽可能对目标字符串各种情况考虑全面不遗漏

re模块使用
  regex = compile(pattern, flags=0)
  功能:生成正则表达式对象
  参数:
    pattern  正则表达式
    flags    功能标志位,丰富正则表达式的匹配功能
  返回值:返回正则表达式

  re.findall(pattern, string, flags)
  功能:从目标字符串匹配所有正则内容
  参数:
    pattern 正则
    string  目标字符串
    flags   功能标志
  返回值: 返回匹配到的内容列表
         如果正则表达式有子组则只获取子组对应内容

  regex.findall(string, pos, endpos) 
  功能:从目标字符串匹配所有正则内容
  参数:
    string  目标字符串
    pos     对目标字符串截取的起始位置,默认开头
    endpos  对目标字符串截取的结束位置,默认结尾
  返回值: 返回匹配到的内容列表
         如果正则表达式有子组则只获取子组对应内容

  re.split(pattern, string, flags)
  功能:使用正则表达式匹配内容切割字符串
  参数:
    pattern  正则
    string   目标字符串
  返回: 列表  切割后的内容 

  re.sub(pattern, replaceStr, string, max, flags)
  功能:使用字符串替换正则匹配内容
  参数:
    pattern  正则
    replaceStr  替换的字符串
    string  目标字符串
    max  最多替换几处,默认全部替换
  返回:返回替换后的字符串

  re.subn(): 与sub相同,多返回一个替换个数

  re.finditer(pattern,string, flags)
  功能:查找正则表达式匹配内容
  参数:
    pattern  正则
    string   目标字符串
    flags    
  返回:迭代对象

  re.fullmatch(pattern, string, flags)
  功能:完全匹配目标字符串
  参数: 
    pattern  正则
    string   目标字符串
    flags
  返回:返回匹配到的内容,失败返回None

  re.match(pattern, string, flags)
  功能:匹配目标字符串开始位置
  参数: 
    pattern  正则
    string   目标字符串
    flags
  返回:返回匹配到的内容,失败返回None

  re.search(pattern, string, flags)
  功能:匹配目标字符串第一处匹配内容
  参数: 
    pattern  正则
    string   目标字符串
    flags
  返回:返回匹配到的内容,失败返回None


作业:
  1.熟记正则表达式元字符
  2.使用regex对象复习re模块调用的函数
  3.找一个文档,使用正则表达式匹配:
    [1] 所有以大写字母开头的单词 r"\b[A-Z][a-z]*\b"
    [2] 所有的数字,包含整数,小数,负数,分数,百分数  -?\d*\.?\d*%?\\-?\d*\.?\d*%?

    re.findall(r"-?\d+\.?\d*/?-?\d*\.?\d*%?","1,3.3,-3.3,-4,5%,1/2,-1/-2")